/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.CreateKeyPairRequest;
import com.layer1.clients.java8.digital.model.KeyPair;
import com.layer1.clients.java8.digital.model.PaginatedResultKeyPair;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeyPairApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeyPairApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeyPairApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createKeyPairCall(@javax.annotation.Nonnull CreateKeyPairRequest createKeyPairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKeyPairRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/key-pairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeyPairValidateBeforeCall(@javax.annotation.Nonnull CreateKeyPairRequest createKeyPairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createKeyPairRequest' is set
        if (createKeyPairRequest == null) {
            throw new ApiException("Missing the required parameter 'createKeyPairRequest' when calling createKeyPair(Async)");
        }

        return createKeyPairCall(createKeyPairRequest, _callback);

    }


    private ApiResponse<KeyPair> createKeyPairWithHttpInfo(@javax.annotation.Nonnull CreateKeyPairRequest createKeyPairRequest) throws ApiException {
        okhttp3.Call localVarCall = createKeyPairValidateBeforeCall(createKeyPairRequest, null);
        Type localVarReturnType = new TypeToken<KeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createKeyPairAsync(@javax.annotation.Nonnull CreateKeyPairRequest createKeyPairRequest, final ApiCallback<KeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeyPairValidateBeforeCall(createKeyPairRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateKeyPairRequest {
        @javax.annotation.Nonnull
        private final CreateKeyPairRequest createKeyPairRequest;

        private APIcreateKeyPairRequest(@javax.annotation.Nonnull CreateKeyPairRequest createKeyPairRequest) {
            this.createKeyPairRequest = createKeyPairRequest;
        }

        /**
         * Build call for createKeyPair
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createKeyPairCall(createKeyPairRequest, _callback);
        }

        /**
         * Execute createKeyPair request
         * @return KeyPair
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public KeyPair execute() throws ApiException {
            ApiResponse<KeyPair> localVarResp = createKeyPairWithHttpInfo(createKeyPairRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createKeyPair request with HTTP info returned
         * @return ApiResponse&lt;KeyPair&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPair> executeWithHttpInfo() throws ApiException {
            return createKeyPairWithHttpInfo(createKeyPairRequest);
        }

        /**
         * Execute createKeyPair request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPair> _callback) throws ApiException {
            return createKeyPairAsync(createKeyPairRequest, _callback);
        }
    }

    /**
     * Create key pair
     * Creates a new key pair from which different addresses can be created
     * @param createKeyPairRequest  (required)
     * @return APIcreateKeyPairRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateKeyPairRequest createKeyPair(@javax.annotation.Nonnull CreateKeyPairRequest createKeyPairRequest) {
        return new APIcreateKeyPairRequest(createKeyPairRequest);
    }
    private okhttp3.Call getKeyPairCall(@javax.annotation.Nonnull UUID keyPairId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/key-pairs/{keyPairId}"
            .replace("{" + "keyPairId" + "}", localVarApiClient.escapeString(keyPairId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyPairValidateBeforeCall(@javax.annotation.Nonnull UUID keyPairId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyPairId' is set
        if (keyPairId == null) {
            throw new ApiException("Missing the required parameter 'keyPairId' when calling getKeyPair(Async)");
        }

        return getKeyPairCall(keyPairId, _callback);

    }


    private ApiResponse<KeyPair> getKeyPairWithHttpInfo(@javax.annotation.Nonnull UUID keyPairId) throws ApiException {
        okhttp3.Call localVarCall = getKeyPairValidateBeforeCall(keyPairId, null);
        Type localVarReturnType = new TypeToken<KeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKeyPairAsync(@javax.annotation.Nonnull UUID keyPairId, final ApiCallback<KeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyPairValidateBeforeCall(keyPairId, _callback);
        Type localVarReturnType = new TypeToken<KeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetKeyPairRequest {
        @javax.annotation.Nonnull
        private final UUID keyPairId;

        private APIgetKeyPairRequest(@javax.annotation.Nonnull UUID keyPairId) {
            this.keyPairId = keyPairId;
        }

        /**
         * Build call for getKeyPair
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKeyPairCall(keyPairId, _callback);
        }

        /**
         * Execute getKeyPair request
         * @return KeyPair
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public KeyPair execute() throws ApiException {
            ApiResponse<KeyPair> localVarResp = getKeyPairWithHttpInfo(keyPairId);
            return localVarResp.getData();
        }

        /**
         * Execute getKeyPair request with HTTP info returned
         * @return ApiResponse&lt;KeyPair&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPair> executeWithHttpInfo() throws ApiException {
            return getKeyPairWithHttpInfo(keyPairId);
        }

        /**
         * Execute getKeyPair request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPair> _callback) throws ApiException {
            return getKeyPairAsync(keyPairId, _callback);
        }
    }

    /**
     * Get key pair
     * Retrieve a key pair given id
     * @param keyPairId  (required)
     * @return APIgetKeyPairRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetKeyPairRequest getKeyPair(@javax.annotation.Nonnull UUID keyPairId) {
        return new APIgetKeyPairRequest(keyPairId);
    }
    private okhttp3.Call listKeyPairsCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/key-pairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetPoolId", assetPoolId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listKeyPairsValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling listKeyPairs(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listKeyPairs(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listKeyPairs(Async)");
        }

        return listKeyPairsCall(assetPoolId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<PaginatedResultKeyPair> listKeyPairsWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listKeyPairsValidateBeforeCall(assetPoolId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<PaginatedResultKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listKeyPairsAsync(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback<PaginatedResultKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = listKeyPairsValidateBeforeCall(assetPoolId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistKeyPairsRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;

        private APIlistKeyPairsRequest(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.assetPoolId = assetPoolId;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Build call for listKeyPairs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listKeyPairsCall(assetPoolId, pageNumber, pageSize, _callback);
        }

        /**
         * Execute listKeyPairs request
         * @return PaginatedResultKeyPair
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedResultKeyPair execute() throws ApiException {
            ApiResponse<PaginatedResultKeyPair> localVarResp = listKeyPairsWithHttpInfo(assetPoolId, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute listKeyPairs request with HTTP info returned
         * @return ApiResponse&lt;PaginatedResultKeyPair&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedResultKeyPair> executeWithHttpInfo() throws ApiException {
            return listKeyPairsWithHttpInfo(assetPoolId, pageNumber, pageSize);
        }

        /**
         * Execute listKeyPairs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedResultKeyPair> _callback) throws ApiException {
            return listKeyPairsAsync(assetPoolId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List key pairs
     * Retrieve paginated list of key-pairs belonging to a asset pool
     * @param assetPoolId  (required)
     * @param pageNumber  (required)
     * @param pageSize  (required)
     * @return APIlistKeyPairsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIlistKeyPairsRequest listKeyPairs(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIlistKeyPairsRequest(assetPoolId, pageNumber, pageSize);
    }
}
