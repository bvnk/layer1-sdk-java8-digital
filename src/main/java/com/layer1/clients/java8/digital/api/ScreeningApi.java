/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.ManualActionRequest;
import java.time.OffsetDateTime;
import com.layer1.clients.java8.digital.model.PaginatedScreenings;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScreeningApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreeningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScreeningApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listScreeningsCall(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String hash, @javax.annotation.Nullable Set<String> operation, @javax.annotation.Nullable Set<String> state, @javax.annotation.Nullable OffsetDateTime startDate, @javax.annotation.Nullable OffsetDateTime endDate, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/screenings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (operation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "operation", operation));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScreeningsValidateBeforeCall(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String hash, @javax.annotation.Nullable Set<String> operation, @javax.annotation.Nullable Set<String> state, @javax.annotation.Nullable OffsetDateTime startDate, @javax.annotation.Nullable OffsetDateTime endDate, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listScreenings(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listScreenings(Async)");
        }

        return listScreeningsCall(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q, _callback);

    }


    private ApiResponse<PaginatedScreenings> listScreeningsWithHttpInfo(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String hash, @javax.annotation.Nullable Set<String> operation, @javax.annotation.Nullable Set<String> state, @javax.annotation.Nullable OffsetDateTime startDate, @javax.annotation.Nullable OffsetDateTime endDate, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String q) throws ApiException {
        okhttp3.Call localVarCall = listScreeningsValidateBeforeCall(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q, null);
        Type localVarReturnType = new TypeToken<PaginatedScreenings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listScreeningsAsync(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String hash, @javax.annotation.Nullable Set<String> operation, @javax.annotation.Nullable Set<String> state, @javax.annotation.Nullable OffsetDateTime startDate, @javax.annotation.Nullable OffsetDateTime endDate, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String q, final ApiCallback<PaginatedScreenings> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScreeningsValidateBeforeCall(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q, _callback);
        Type localVarReturnType = new TypeToken<PaginatedScreenings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistScreeningsRequest {
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;
        @javax.annotation.Nullable
        private String hash;
        @javax.annotation.Nullable
        private Set<String> operation;
        @javax.annotation.Nullable
        private Set<String> state;
        @javax.annotation.Nullable
        private OffsetDateTime startDate;
        @javax.annotation.Nullable
        private OffsetDateTime endDate;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String q;

        private APIlistScreeningsRequest(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set hash
         * @param hash Filter by transaction hash (optional)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest hash(@javax.annotation.Nullable String hash) {
            this.hash = hash;
            return this;
        }

        /**
         * Set operation
         * @param operation Set of operations to filter by (optional)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest operation(@javax.annotation.Nullable Set<String> operation) {
            this.operation = operation;
            return this;
        }

        /**
         * Set state
         * @param state Set of screening states to filter by (optional)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest state(@javax.annotation.Nullable Set<String> state) {
            this.state = state;
            return this;
        }

        /**
         * Set startDate
         * @param startDate Start date for filtering by transfer creation date (optional)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest startDate(@javax.annotation.Nullable OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Set endDate
         * @param endDate End date for filtering by transfer creation date (optional)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest endDate(@javax.annotation.Nullable OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Set sort
         * @param sort  (optional, default to screeningId.transfer.id.createdAt,desc)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set q
         * @param q Query using Lucene-like syntax. Supported properties: notReasonCode, reasonCode, reason, hash, state, operation, from, to (optional)
         * @return APIlistScreeningsRequest
         */
        public APIlistScreeningsRequest q(@javax.annotation.Nullable String q) {
            this.q = q;
            return this;
        }

        /**
         * Build call for listScreenings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> List screenings successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listScreeningsCall(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q, _callback);
        }

        /**
         * Execute listScreenings request
         * @return PaginatedScreenings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> List screenings successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedScreenings execute() throws ApiException {
            ApiResponse<PaginatedScreenings> localVarResp = listScreeningsWithHttpInfo(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q);
            return localVarResp.getData();
        }

        /**
         * Execute listScreenings request with HTTP info returned
         * @return ApiResponse&lt;PaginatedScreenings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> List screenings successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedScreenings> executeWithHttpInfo() throws ApiException {
            return listScreeningsWithHttpInfo(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q);
        }

        /**
         * Execute listScreenings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> List screenings successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedScreenings> _callback) throws ApiException {
            return listScreeningsAsync(pageNumber, pageSize, hash, operation, state, startDate, endDate, sort, q, _callback);
        }
    }

    /**
     * List screening results
     * Retrieves a paginated list of the most recent transfers along with their screening results.
     * @param pageNumber  (required)
     * @param pageSize  (required)
     * @return APIlistScreeningsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> List screenings successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIlistScreeningsRequest listScreenings(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIlistScreeningsRequest(pageNumber, pageSize);
    }
    private okhttp3.Call manuallyActionHeldTransferCall(@javax.annotation.Nonnull ManualActionRequest manualActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manualActionRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/screenings/action";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manuallyActionHeldTransferValidateBeforeCall(@javax.annotation.Nonnull ManualActionRequest manualActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manualActionRequest' is set
        if (manualActionRequest == null) {
            throw new ApiException("Missing the required parameter 'manualActionRequest' when calling manuallyActionHeldTransfer(Async)");
        }

        return manuallyActionHeldTransferCall(manualActionRequest, _callback);

    }


    private ApiResponse<Void> manuallyActionHeldTransferWithHttpInfo(@javax.annotation.Nonnull ManualActionRequest manualActionRequest) throws ApiException {
        okhttp3.Call localVarCall = manuallyActionHeldTransferValidateBeforeCall(manualActionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call manuallyActionHeldTransferAsync(@javax.annotation.Nonnull ManualActionRequest manualActionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = manuallyActionHeldTransferValidateBeforeCall(manualActionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APImanuallyActionHeldTransferRequest {
        @javax.annotation.Nonnull
        private final ManualActionRequest manualActionRequest;

        private APImanuallyActionHeldTransferRequest(@javax.annotation.Nonnull ManualActionRequest manualActionRequest) {
            this.manualActionRequest = manualActionRequest;
        }

        /**
         * Build call for manuallyActionHeldTransfer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Transfer reviewed successfully </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> Withdrawal not found or has already been completed </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return manuallyActionHeldTransferCall(manualActionRequest, _callback);
        }

        /**
         * Execute manuallyActionHeldTransfer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Transfer reviewed successfully </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> Withdrawal not found or has already been completed </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            manuallyActionHeldTransferWithHttpInfo(manualActionRequest);
        }

        /**
         * Execute manuallyActionHeldTransfer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Transfer reviewed successfully </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> Withdrawal not found or has already been completed </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return manuallyActionHeldTransferWithHttpInfo(manualActionRequest);
        }

        /**
         * Execute manuallyActionHeldTransfer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Transfer reviewed successfully </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> Withdrawal not found or has already been completed </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return manuallyActionHeldTransferAsync(manualActionRequest, _callback);
        }
    }

    /**
     * Approve or reject a held transfer. Deposits can be only approved.
     * Approves or rejects a held transfer based on the provided transfer ID and the destination address ID.
     * @param manualActionRequest  (required)
     * @return APImanuallyActionHeldTransferRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Transfer reviewed successfully </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Withdrawal not found or has already been completed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APImanuallyActionHeldTransferRequest manuallyActionHeldTransfer(@javax.annotation.Nonnull ManualActionRequest manualActionRequest) {
        return new APImanuallyActionHeldTransferRequest(manualActionRequest);
    }
}
