/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.CreateBalanceExportRequest;
import com.layer1.clients.java8.digital.model.Export;
import com.layer1.clients.java8.digital.model.PaginatedExports;
import java.util.Set;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBalanceExportCall(@javax.annotation.Nonnull CreateBalanceExportRequest createBalanceExportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBalanceExportRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBalanceExportValidateBeforeCall(@javax.annotation.Nonnull CreateBalanceExportRequest createBalanceExportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBalanceExportRequest' is set
        if (createBalanceExportRequest == null) {
            throw new ApiException("Missing the required parameter 'createBalanceExportRequest' when calling createBalanceExport(Async)");
        }

        return createBalanceExportCall(createBalanceExportRequest, _callback);

    }


    private ApiResponse<Void> createBalanceExportWithHttpInfo(@javax.annotation.Nonnull CreateBalanceExportRequest createBalanceExportRequest) throws ApiException {
        okhttp3.Call localVarCall = createBalanceExportValidateBeforeCall(createBalanceExportRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createBalanceExportAsync(@javax.annotation.Nonnull CreateBalanceExportRequest createBalanceExportRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBalanceExportValidateBeforeCall(createBalanceExportRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateBalanceExportRequest {
        @javax.annotation.Nonnull
        private final CreateBalanceExportRequest createBalanceExportRequest;

        private APIcreateBalanceExportRequest(@javax.annotation.Nonnull CreateBalanceExportRequest createBalanceExportRequest) {
            this.createBalanceExportRequest = createBalanceExportRequest;
        }

        /**
         * Build call for createBalanceExport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict: Export job is already running for the specified criteria </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Export job created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createBalanceExportCall(createBalanceExportRequest, _callback);
        }

        /**
         * Execute createBalanceExport request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict: Export job is already running for the specified criteria </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Export job created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createBalanceExportWithHttpInfo(createBalanceExportRequest);
        }

        /**
         * Execute createBalanceExport request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict: Export job is already running for the specified criteria </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Export job created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createBalanceExportWithHttpInfo(createBalanceExportRequest);
        }

        /**
         * Execute createBalanceExport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict: Export job is already running for the specified criteria </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Export job created successfully </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createBalanceExportAsync(createBalanceExportRequest, _callback);
        }
    }

    /**
     * Create a balance export
     * Initiates a job to export balance data in the CSV format.
     * @param createBalanceExportRequest  (required)
     * @return APIcreateBalanceExportRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict: Export job is already running for the specified criteria </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Export job created successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateBalanceExportRequest createBalanceExport(@javax.annotation.Nonnull CreateBalanceExportRequest createBalanceExportRequest) {
        return new APIcreateBalanceExportRequest(createBalanceExportRequest);
    }
    private okhttp3.Call getExportCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/exports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExport(Async)");
        }

        return getExportCall(id, _callback);

    }


    private ApiResponse<Export> getExportWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getExportValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExportAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Export> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExportRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetExportRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getExport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Export details </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Export not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExportCall(id, _callback);
        }

        /**
         * Execute getExport request
         * @return Export
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Export details </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Export not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public Export execute() throws ApiException {
            ApiResponse<Export> localVarResp = getExportWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getExport request with HTTP info returned
         * @return ApiResponse&lt;Export&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Export details </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Export not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Export> executeWithHttpInfo() throws ApiException {
            return getExportWithHttpInfo(id);
        }

        /**
         * Execute getExport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Export details </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Export not found </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Export> _callback) throws ApiException {
            return getExportAsync(id, _callback);
        }
    }

    /**
     * Get export with a download link
     * Retrieves export details with a short-lived download link by its ID.
     * @param id The ID of the export to retrieve (required)
     * @return APIgetExportRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Export details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Export not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExportRequest getExport(@javax.annotation.Nonnull UUID id) {
        return new APIgetExportRequest(id);
    }
    private okhttp3.Call getExportsCall(@javax.annotation.Nonnull Set<String> type, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportsValidateBeforeCall(@javax.annotation.Nonnull Set<String> type, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getExports(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getExports(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getExports(Async)");
        }

        return getExportsCall(type, pageNumber, pageSize, _callback);

    }


    private ApiResponse<List<PaginatedExports>> getExportsWithHttpInfo(@javax.annotation.Nonnull Set<String> type, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getExportsValidateBeforeCall(type, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<PaginatedExports>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExportsAsync(@javax.annotation.Nonnull Set<String> type, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback<List<PaginatedExports>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportsValidateBeforeCall(type, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<PaginatedExports>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExportsRequest {
        @javax.annotation.Nonnull
        private final Set<String> type;
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;

        private APIgetExportsRequest(@javax.annotation.Nonnull Set<String> type, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.type = type;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Build call for getExports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Paginated list of exports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExportsCall(type, pageNumber, pageSize, _callback);
        }

        /**
         * Execute getExports request
         * @return List&lt;PaginatedExports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Paginated list of exports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public List<PaginatedExports> execute() throws ApiException {
            ApiResponse<List<PaginatedExports>> localVarResp = getExportsWithHttpInfo(type, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute getExports request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PaginatedExports&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Paginated list of exports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PaginatedExports>> executeWithHttpInfo() throws ApiException {
            return getExportsWithHttpInfo(type, pageNumber, pageSize);
        }

        /**
         * Execute getExports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Paginated list of exports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PaginatedExports>> _callback) throws ApiException {
            return getExportsAsync(type, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List all exports
     * Retrieves a paginated list of exports based on type and pagination settings.
     * @param type Filter exports by type (required)
     * @param pageNumber  (required)
     * @param pageSize  (required)
     * @return APIgetExportsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Paginated list of exports </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExportsRequest getExports(@javax.annotation.Nonnull Set<String> type, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIgetExportsRequest(type, pageNumber, pageSize);
    }
}
