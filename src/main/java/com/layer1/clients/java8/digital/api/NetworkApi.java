/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.Network;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getNetworksCall(@javax.annotation.Nullable Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/networks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDisabled", includeDisabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworksValidateBeforeCall(@javax.annotation.Nullable Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        return getNetworksCall(includeDisabled, _callback);

    }


    private ApiResponse<List<Network>> getNetworksWithHttpInfo(@javax.annotation.Nullable Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = getNetworksValidateBeforeCall(includeDisabled, null);
        Type localVarReturnType = new TypeToken<List<Network>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNetworksAsync(@javax.annotation.Nullable Boolean includeDisabled, final ApiCallback<List<Network>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworksValidateBeforeCall(includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<List<Network>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetNetworksRequest {
        @javax.annotation.Nullable
        private Boolean includeDisabled;

        private APIgetNetworksRequest() {
        }

        /**
         * Set includeDisabled
         * @param includeDisabled Include disabled networks in the response (optional, default to false)
         * @return APIgetNetworksRequest
         */
        public APIgetNetworksRequest includeDisabled(@javax.annotation.Nullable Boolean includeDisabled) {
            this.includeDisabled = includeDisabled;
            return this;
        }

        /**
         * Build call for getNetworks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNetworksCall(includeDisabled, _callback);
        }

        /**
         * Execute getNetworks request
         * @return List&lt;Network&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public List<Network> execute() throws ApiException {
            ApiResponse<List<Network>> localVarResp = getNetworksWithHttpInfo(includeDisabled);
            return localVarResp.getData();
        }

        /**
         * Execute getNetworks request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Network&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Network>> executeWithHttpInfo() throws ApiException {
            return getNetworksWithHttpInfo(includeDisabled);
        }

        /**
         * Execute getNetworks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Network>> _callback) throws ApiException {
            return getNetworksAsync(includeDisabled, _callback);
        }
    }

    /**
     * Get all networks
     * Get all supported networks and their assets. By default, only enabled networks are returned.
     * @return APIgetNetworksRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetNetworksRequest getNetworks() {
        return new APIgetNetworksRequest();
    }
}
