/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.layer1.clients.java8.digital.model.Participant;
import com.layer1.clients.java8.digital.model.ScreeningMetadata;
import com.layer1.clients.java8.digital.model.TransactionMetadata;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.layer1.clients.java8.digital.invoker.JSON;

/**
 * ScreeningView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ScreeningView {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nullable
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "transactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  @javax.annotation.Nullable
  private String transactionHash;

  /**
   * Current status of the transaction
   */
  @JsonAdapter(TransactionStatusEnum.Adapter.class)
  public enum TransactionStatusEnum {
    BLOCKED("BLOCKED"),
    
    CONFIRMED("CONFIRMED"),
    
    CREATED("CREATED"),
    
    DETECTED("DETECTED"),
    
    FAILED("FAILED"),
    
    FUNDS_RESERVED("FUNDS_RESERVED"),
    
    HELD("HELD"),
    
    REJECTED("REJECTED"),
    
    SCREENING_PASSED("SCREENING_PASSED"),
    
    SCREENING_REQUESTED("SCREENING_REQUESTED"),
    
    SIGNED("SIGNED"),
    
    SUCCESS("SUCCESS"),
    
    UNCONFIRMED("UNCONFIRMED"),
    
    REPLACED("REPLACED"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  @javax.annotation.Nullable
  private TransactionStatusEnum transactionStatus;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private String network;

  public static final String SERIALIZED_NAME_TRANSACTION_METADATA = "transactionMetadata";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_METADATA)
  @javax.annotation.Nullable
  private TransactionMetadata transactionMetadata;

  public static final String SERIALIZED_NAME_TRANSACTION_CREATED_AT = "transactionCreatedAt";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime transactionCreatedAt;

  public static final String SERIALIZED_NAME_TRANSACTION_UPDATED_AT = "transactionUpdatedAt";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime transactionUpdatedAt;

  /**
   * Screening state of the transaction
   */
  @JsonAdapter(ScreeningStateEnum.Adapter.class)
  public enum ScreeningStateEnum {
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED"),
    
    PENDING_SCREENING("PENDING_SCREENING"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    ScreeningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScreeningStateEnum fromValue(String value) {
      for (ScreeningStateEnum b : ScreeningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<ScreeningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScreeningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScreeningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScreeningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScreeningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCREENING_STATE = "screeningState";
  @SerializedName(SERIALIZED_NAME_SCREENING_STATE)
  @javax.annotation.Nullable
  private ScreeningStateEnum screeningState;

  public static final String SERIALIZED_NAME_SCREENING_REASON = "screeningReason";
  @SerializedName(SERIALIZED_NAME_SCREENING_REASON)
  @javax.annotation.Nullable
  private String screeningReason;

  public static final String SERIALIZED_NAME_SCREENING_REASON_CODE = "screeningReasonCode";
  @SerializedName(SERIALIZED_NAME_SCREENING_REASON_CODE)
  @javax.annotation.Nullable
  private String screeningReasonCode;

  public static final String SERIALIZED_NAME_SCREENING_CREATED_AT = "screeningCreatedAt";
  @SerializedName(SERIALIZED_NAME_SCREENING_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime screeningCreatedAt;

  public static final String SERIALIZED_NAME_SCREENING_UPDATED_AT = "screeningUpdatedAt";
  @SerializedName(SERIALIZED_NAME_SCREENING_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime screeningUpdatedAt;

  public static final String SERIALIZED_NAME_SCREENING_METADATA = "screeningMetadata";
  @SerializedName(SERIALIZED_NAME_SCREENING_METADATA)
  @javax.annotation.Nullable
  private ScreeningMetadata screeningMetadata;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  @javax.annotation.Nullable
  private List<Participant> participants = new ArrayList<>();

  /**
   * Operation type for the screening
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    DEPOSIT("DEPOSIT"),
    
    WITHDRAWAL("WITHDRAWAL"),
    
    CONSOLIDATION("CONSOLIDATION"),
    
    RETURN("RETURN"),
    
    STAKE("STAKE"),
    
    UNSTAKE("UNSTAKE"),
    
    DELEGATE("DELEGATE"),
    
    UNDELEGATE("UNDELEGATE"),
    
    RELEASE("RELEASE"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  @javax.annotation.Nullable
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  @javax.annotation.Nullable
  private UUID addressId;

  public ScreeningView() {
  }

  public ScreeningView transactionId(@javax.annotation.Nullable String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Unique identifier of the transaction
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nullable String transactionId) {
    this.transactionId = transactionId;
  }


  public ScreeningView transactionHash(@javax.annotation.Nullable String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

  /**
   * Blockchain transaction hash
   * @return transactionHash
   */
  @javax.annotation.Nullable
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(@javax.annotation.Nullable String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public ScreeningView transactionStatus(@javax.annotation.Nullable TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

  /**
   * Current status of the transaction
   * @return transactionStatus
   */
  @javax.annotation.Nullable
  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(@javax.annotation.Nullable TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public ScreeningView network(@javax.annotation.Nullable String network) {
    this.network = network;
    return this;
  }

  /**
   * Network code used for the transaction
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(@javax.annotation.Nullable String network) {
    this.network = network;
  }


  public ScreeningView transactionMetadata(@javax.annotation.Nullable TransactionMetadata transactionMetadata) {
    this.transactionMetadata = transactionMetadata;
    return this;
  }

  /**
   * Transaction metadata in JSON format
   * @return transactionMetadata
   */
  @javax.annotation.Nullable
  public TransactionMetadata getTransactionMetadata() {
    return transactionMetadata;
  }

  public void setTransactionMetadata(@javax.annotation.Nullable TransactionMetadata transactionMetadata) {
    this.transactionMetadata = transactionMetadata;
  }


  public ScreeningView transactionCreatedAt(@javax.annotation.Nullable OffsetDateTime transactionCreatedAt) {
    this.transactionCreatedAt = transactionCreatedAt;
    return this;
  }

  /**
   * Timestamp when the transaction was created
   * @return transactionCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransactionCreatedAt() {
    return transactionCreatedAt;
  }

  public void setTransactionCreatedAt(@javax.annotation.Nullable OffsetDateTime transactionCreatedAt) {
    this.transactionCreatedAt = transactionCreatedAt;
  }


  public ScreeningView transactionUpdatedAt(@javax.annotation.Nullable OffsetDateTime transactionUpdatedAt) {
    this.transactionUpdatedAt = transactionUpdatedAt;
    return this;
  }

  /**
   * Timestamp when the transaction was last updated
   * @return transactionUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransactionUpdatedAt() {
    return transactionUpdatedAt;
  }

  public void setTransactionUpdatedAt(@javax.annotation.Nullable OffsetDateTime transactionUpdatedAt) {
    this.transactionUpdatedAt = transactionUpdatedAt;
  }


  public ScreeningView screeningState(@javax.annotation.Nullable ScreeningStateEnum screeningState) {
    this.screeningState = screeningState;
    return this;
  }

  /**
   * Screening state of the transaction
   * @return screeningState
   */
  @javax.annotation.Nullable
  public ScreeningStateEnum getScreeningState() {
    return screeningState;
  }

  public void setScreeningState(@javax.annotation.Nullable ScreeningStateEnum screeningState) {
    this.screeningState = screeningState;
  }


  public ScreeningView screeningReason(@javax.annotation.Nullable String screeningReason) {
    this.screeningReason = screeningReason;
    return this;
  }

  /**
   * Reason for the screening result
   * @return screeningReason
   */
  @javax.annotation.Nullable
  public String getScreeningReason() {
    return screeningReason;
  }

  public void setScreeningReason(@javax.annotation.Nullable String screeningReason) {
    this.screeningReason = screeningReason;
  }


  public ScreeningView screeningReasonCode(@javax.annotation.Nullable String screeningReasonCode) {
    this.screeningReasonCode = screeningReasonCode;
    return this;
  }

  /**
   * Reason code for the screening result
   * @return screeningReasonCode
   */
  @javax.annotation.Nullable
  public String getScreeningReasonCode() {
    return screeningReasonCode;
  }

  public void setScreeningReasonCode(@javax.annotation.Nullable String screeningReasonCode) {
    this.screeningReasonCode = screeningReasonCode;
  }


  public ScreeningView screeningCreatedAt(@javax.annotation.Nullable OffsetDateTime screeningCreatedAt) {
    this.screeningCreatedAt = screeningCreatedAt;
    return this;
  }

  /**
   * Timestamp when the screening was created
   * @return screeningCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScreeningCreatedAt() {
    return screeningCreatedAt;
  }

  public void setScreeningCreatedAt(@javax.annotation.Nullable OffsetDateTime screeningCreatedAt) {
    this.screeningCreatedAt = screeningCreatedAt;
  }


  public ScreeningView screeningUpdatedAt(@javax.annotation.Nullable OffsetDateTime screeningUpdatedAt) {
    this.screeningUpdatedAt = screeningUpdatedAt;
    return this;
  }

  /**
   * Timestamp when the screening was last updated
   * @return screeningUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScreeningUpdatedAt() {
    return screeningUpdatedAt;
  }

  public void setScreeningUpdatedAt(@javax.annotation.Nullable OffsetDateTime screeningUpdatedAt) {
    this.screeningUpdatedAt = screeningUpdatedAt;
  }


  public ScreeningView screeningMetadata(@javax.annotation.Nullable ScreeningMetadata screeningMetadata) {
    this.screeningMetadata = screeningMetadata;
    return this;
  }

  /**
   * Screening metadata in JSON format
   * @return screeningMetadata
   */
  @javax.annotation.Nullable
  public ScreeningMetadata getScreeningMetadata() {
    return screeningMetadata;
  }

  public void setScreeningMetadata(@javax.annotation.Nullable ScreeningMetadata screeningMetadata) {
    this.screeningMetadata = screeningMetadata;
  }


  public ScreeningView participants(@javax.annotation.Nullable List<Participant> participants) {
    this.participants = participants;
    return this;
  }

  public ScreeningView addParticipantsItem(Participant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * List of participants involved in the transaction
   * @return participants
   */
  @javax.annotation.Nullable
  public List<Participant> getParticipants() {
    return participants;
  }

  public void setParticipants(@javax.annotation.Nullable List<Participant> participants) {
    this.participants = participants;
  }


  public ScreeningView operation(@javax.annotation.Nullable OperationEnum operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Operation type for the screening
   * @return operation
   */
  @javax.annotation.Nullable
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(@javax.annotation.Nullable OperationEnum operation) {
    this.operation = operation;
  }


  public ScreeningView addressId(@javax.annotation.Nullable UUID addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Unique identifier of the address involved in the screening
   * @return addressId
   */
  @javax.annotation.Nullable
  public UUID getAddressId() {
    return addressId;
  }

  public void setAddressId(@javax.annotation.Nullable UUID addressId) {
    this.addressId = addressId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScreeningView instance itself
   */
  public ScreeningView putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreeningView screeningView = (ScreeningView) o;
    return Objects.equals(this.transactionId, screeningView.transactionId) &&
        Objects.equals(this.transactionHash, screeningView.transactionHash) &&
        Objects.equals(this.transactionStatus, screeningView.transactionStatus) &&
        Objects.equals(this.network, screeningView.network) &&
        Objects.equals(this.transactionMetadata, screeningView.transactionMetadata) &&
        Objects.equals(this.transactionCreatedAt, screeningView.transactionCreatedAt) &&
        Objects.equals(this.transactionUpdatedAt, screeningView.transactionUpdatedAt) &&
        Objects.equals(this.screeningState, screeningView.screeningState) &&
        Objects.equals(this.screeningReason, screeningView.screeningReason) &&
        Objects.equals(this.screeningReasonCode, screeningView.screeningReasonCode) &&
        Objects.equals(this.screeningCreatedAt, screeningView.screeningCreatedAt) &&
        Objects.equals(this.screeningUpdatedAt, screeningView.screeningUpdatedAt) &&
        Objects.equals(this.screeningMetadata, screeningView.screeningMetadata) &&
        Objects.equals(this.participants, screeningView.participants) &&
        Objects.equals(this.operation, screeningView.operation) &&
        Objects.equals(this.addressId, screeningView.addressId)&&
        Objects.equals(this.additionalProperties, screeningView.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, transactionHash, transactionStatus, network, transactionMetadata, transactionCreatedAt, transactionUpdatedAt, screeningState, screeningReason, screeningReasonCode, screeningCreatedAt, screeningUpdatedAt, screeningMetadata, participants, operation, addressId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreeningView {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    transactionMetadata: ").append(toIndentedString(transactionMetadata)).append("\n");
    sb.append("    transactionCreatedAt: ").append(toIndentedString(transactionCreatedAt)).append("\n");
    sb.append("    transactionUpdatedAt: ").append(toIndentedString(transactionUpdatedAt)).append("\n");
    sb.append("    screeningState: ").append(toIndentedString(screeningState)).append("\n");
    sb.append("    screeningReason: ").append(toIndentedString(screeningReason)).append("\n");
    sb.append("    screeningReasonCode: ").append(toIndentedString(screeningReasonCode)).append("\n");
    sb.append("    screeningCreatedAt: ").append(toIndentedString(screeningCreatedAt)).append("\n");
    sb.append("    screeningUpdatedAt: ").append(toIndentedString(screeningUpdatedAt)).append("\n");
    sb.append("    screeningMetadata: ").append(toIndentedString(screeningMetadata)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("transactionHash");
    openapiFields.add("transactionStatus");
    openapiFields.add("network");
    openapiFields.add("transactionMetadata");
    openapiFields.add("transactionCreatedAt");
    openapiFields.add("transactionUpdatedAt");
    openapiFields.add("screeningState");
    openapiFields.add("screeningReason");
    openapiFields.add("screeningReasonCode");
    openapiFields.add("screeningCreatedAt");
    openapiFields.add("screeningUpdatedAt");
    openapiFields.add("screeningMetadata");
    openapiFields.add("participants");
    openapiFields.add("operation");
    openapiFields.add("addressId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScreeningView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScreeningView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreeningView is not found in the empty JSON string", ScreeningView.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("transactionHash") != null && !jsonObj.get("transactionHash").isJsonNull()) && !jsonObj.get("transactionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionHash").toString()));
      }
      if ((jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) && !jsonObj.get("transactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatus").toString()));
      }
      // validate the optional field `transactionStatus`
      if (jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) {
        TransactionStatusEnum.validateJsonElement(jsonObj.get("transactionStatus"));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `transactionMetadata`
      if (jsonObj.get("transactionMetadata") != null && !jsonObj.get("transactionMetadata").isJsonNull()) {
        TransactionMetadata.validateJsonElement(jsonObj.get("transactionMetadata"));
      }
      if ((jsonObj.get("screeningState") != null && !jsonObj.get("screeningState").isJsonNull()) && !jsonObj.get("screeningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screeningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screeningState").toString()));
      }
      // validate the optional field `screeningState`
      if (jsonObj.get("screeningState") != null && !jsonObj.get("screeningState").isJsonNull()) {
        ScreeningStateEnum.validateJsonElement(jsonObj.get("screeningState"));
      }
      if ((jsonObj.get("screeningReason") != null && !jsonObj.get("screeningReason").isJsonNull()) && !jsonObj.get("screeningReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screeningReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screeningReason").toString()));
      }
      if ((jsonObj.get("screeningReasonCode") != null && !jsonObj.get("screeningReasonCode").isJsonNull()) && !jsonObj.get("screeningReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screeningReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screeningReasonCode").toString()));
      }
      // validate the optional field `screeningMetadata`
      if (jsonObj.get("screeningMetadata") != null && !jsonObj.get("screeningMetadata").isJsonNull()) {
        ScreeningMetadata.validateJsonElement(jsonObj.get("screeningMetadata"));
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            Participant.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        OperationEnum.validateJsonElement(jsonObj.get("operation"));
      }
      if ((jsonObj.get("addressId") != null && !jsonObj.get("addressId").isJsonNull()) && !jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreeningView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreeningView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreeningView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreeningView.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreeningView>() {
           @Override
           public void write(JsonWriter out, ScreeningView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreeningView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ScreeningView instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScreeningView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScreeningView
   * @throws IOException if the JSON string is invalid with respect to ScreeningView
   */
  public static ScreeningView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreeningView.class);
  }

  /**
   * Convert an instance of ScreeningView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

