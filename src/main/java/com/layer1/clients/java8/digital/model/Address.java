/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.layer1.clients.java8.digital.model.Balance;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.layer1.clients.java8.digital.invoker.JSON;

/**
 * Address
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Address {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_ASSET_POOL_ID = "assetPoolId";
  @SerializedName(SERIALIZED_NAME_ASSET_POOL_ID)
  @javax.annotation.Nullable
  private UUID assetPoolId;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private String network;

  public static final String SERIALIZED_NAME_KEY_PAIR_ID = "keyPairId";
  @SerializedName(SERIALIZED_NAME_KEY_PAIR_ID)
  @javax.annotation.Nullable
  private UUID keyPairId;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  @javax.annotation.Nullable
  private String reference;

  public static final String SERIALIZED_NAME_SUPPORTED_ASSETS = "supportedAssets";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ASSETS)
  @javax.annotation.Nullable
  private List<String> supportedAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  @javax.annotation.Nullable
  private List<String> aliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_BALANCES = "balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  @javax.annotation.Nullable
  private List<Balance> balances = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  @javax.annotation.Nullable
  private String customerId;

  public static final String SERIALIZED_NAME_MASTER = "master";
  @SerializedName(SERIALIZED_NAME_MASTER)
  @javax.annotation.Nullable
  private Boolean master;

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORKS = "supportedNetworks";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORKS)
  @javax.annotation.Nullable
  private List<String> supportedNetworks = new ArrayList<>();

  public Address() {
  }

  public Address id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * internal id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public Address address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * blockchain address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public Address assetPoolId(@javax.annotation.Nullable UUID assetPoolId) {
    this.assetPoolId = assetPoolId;
    return this;
  }

  /**
   * asset pool id
   * @return assetPoolId
   */
  @javax.annotation.Nullable
  public UUID getAssetPoolId() {
    return assetPoolId;
  }

  public void setAssetPoolId(@javax.annotation.Nullable UUID assetPoolId) {
    this.assetPoolId = assetPoolId;
  }


  public Address network(@javax.annotation.Nullable String network) {
    this.network = network;
    return this;
  }

  /**
   * crypto network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(@javax.annotation.Nullable String network) {
    this.network = network;
  }


  public Address keyPairId(@javax.annotation.Nullable UUID keyPairId) {
    this.keyPairId = keyPairId;
    return this;
  }

  /**
   * key pair id
   * @return keyPairId
   */
  @javax.annotation.Nullable
  public UUID getKeyPairId() {
    return keyPairId;
  }

  public void setKeyPairId(@javax.annotation.Nullable UUID keyPairId) {
    this.keyPairId = keyPairId;
  }


  public Address reference(@javax.annotation.Nullable String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * key pair reference
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(@javax.annotation.Nullable String reference) {
    this.reference = reference;
  }


  public Address supportedAssets(@javax.annotation.Nullable List<String> supportedAssets) {
    this.supportedAssets = supportedAssets;
    return this;
  }

  public Address addSupportedAssetsItem(String supportedAssetsItem) {
    if (this.supportedAssets == null) {
      this.supportedAssets = new ArrayList<>();
    }
    this.supportedAssets.add(supportedAssetsItem);
    return this;
  }

  /**
   * list of assets supported by network
   * @return supportedAssets
   */
  @javax.annotation.Nullable
  public List<String> getSupportedAssets() {
    return supportedAssets;
  }

  public void setSupportedAssets(@javax.annotation.Nullable List<String> supportedAssets) {
    this.supportedAssets = supportedAssets;
  }


  public Address aliases(@javax.annotation.Nullable List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public Address addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * alternative address (e.g. BTC has segwitt and legacy format)
   * @return aliases
   */
  @javax.annotation.Nullable
  public List<String> getAliases() {
    return aliases;
  }

  public void setAliases(@javax.annotation.Nullable List<String> aliases) {
    this.aliases = aliases;
  }


  public Address tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * destination tag that serves as optional payment identifier. Only applicable to select networks like Ripple, Solana etc.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public Address balances(@javax.annotation.Nullable List<Balance> balances) {
    this.balances = balances;
    return this;
  }

  public Address addBalancesItem(Balance balancesItem) {
    if (this.balances == null) {
      this.balances = new ArrayList<>();
    }
    this.balances.add(balancesItem);
    return this;
  }

  /**
   * address balances
   * @return balances
   */
  @javax.annotation.Nullable
  public List<Balance> getBalances() {
    return balances;
  }

  public void setBalances(@javax.annotation.Nullable List<Balance> balances) {
    this.balances = balances;
  }


  public Address customerId(@javax.annotation.Nullable String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * custom non-unique identifier supplied for address that is used to link address to external entity like customer
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(@javax.annotation.Nullable String customerId) {
    this.customerId = customerId;
  }


  public Address master(@javax.annotation.Nullable Boolean master) {
    this.master = master;
    return this;
  }

  /**
   * flag indicating whether this address is asset pool master address
   * @return master
   */
  @javax.annotation.Nullable
  public Boolean getMaster() {
    return master;
  }

  public void setMaster(@javax.annotation.Nullable Boolean master) {
    this.master = master;
  }


  public Address supportedNetworks(@javax.annotation.Nullable List<String> supportedNetworks) {
    this.supportedNetworks = supportedNetworks;
    return this;
  }

  public Address addSupportedNetworksItem(String supportedNetworksItem) {
    if (this.supportedNetworks == null) {
      this.supportedNetworks = new ArrayList<>();
    }
    this.supportedNetworks.add(supportedNetworksItem);
    return this;
  }

  /**
   * list of networks supporting given asset. mutually exclusive with network and supportedAssets
   * @return supportedNetworks
   */
  @javax.annotation.Nullable
  public List<String> getSupportedNetworks() {
    return supportedNetworks;
  }

  public void setSupportedNetworks(@javax.annotation.Nullable List<String> supportedNetworks) {
    this.supportedNetworks = supportedNetworks;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Address instance itself
   */
  public Address putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.id, address.id) &&
        Objects.equals(this.address, address.address) &&
        Objects.equals(this.assetPoolId, address.assetPoolId) &&
        Objects.equals(this.network, address.network) &&
        Objects.equals(this.keyPairId, address.keyPairId) &&
        Objects.equals(this.reference, address.reference) &&
        Objects.equals(this.supportedAssets, address.supportedAssets) &&
        Objects.equals(this.aliases, address.aliases) &&
        Objects.equals(this.tag, address.tag) &&
        Objects.equals(this.balances, address.balances) &&
        Objects.equals(this.customerId, address.customerId) &&
        Objects.equals(this.master, address.master) &&
        Objects.equals(this.supportedNetworks, address.supportedNetworks)&&
        Objects.equals(this.additionalProperties, address.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, address, assetPoolId, network, keyPairId, reference, supportedAssets, aliases, tag, balances, customerId, master, supportedNetworks, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    assetPoolId: ").append(toIndentedString(assetPoolId)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    keyPairId: ").append(toIndentedString(keyPairId)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    supportedAssets: ").append(toIndentedString(supportedAssets)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    supportedNetworks: ").append(toIndentedString(supportedNetworks)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("address");
    openapiFields.add("assetPoolId");
    openapiFields.add("network");
    openapiFields.add("keyPairId");
    openapiFields.add("reference");
    openapiFields.add("supportedAssets");
    openapiFields.add("aliases");
    openapiFields.add("tag");
    openapiFields.add("balances");
    openapiFields.add("customerId");
    openapiFields.add("master");
    openapiFields.add("supportedNetworks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Address
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("assetPoolId") != null && !jsonObj.get("assetPoolId").isJsonNull()) && !jsonObj.get("assetPoolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetPoolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetPoolId").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("keyPairId") != null && !jsonObj.get("keyPairId").isJsonNull()) && !jsonObj.get("keyPairId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPairId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyPairId").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedAssets") != null && !jsonObj.get("supportedAssets").isJsonNull() && !jsonObj.get("supportedAssets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedAssets` to be an array in the JSON string but got `%s`", jsonObj.get("supportedAssets").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonNull() && !jsonObj.get("aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
        JsonArray jsonArraybalances = jsonObj.getAsJsonArray("balances");
        if (jsonArraybalances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("balances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `balances` to be an array in the JSON string but got `%s`", jsonObj.get("balances").toString()));
          }

          // validate the optional field `balances` (array)
          for (int i = 0; i < jsonArraybalances.size(); i++) {
            Balance.validateJsonElement(jsonArraybalances.get(i));
          };
        }
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedNetworks") != null && !jsonObj.get("supportedNetworks").isJsonNull() && !jsonObj.get("supportedNetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("supportedNetworks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Address instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Address given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Address
   * @throws IOException if the JSON string is invalid with respect to Address
   */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

  /**
   * Convert an instance of Address to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

