/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.Address;
import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.CreateAddressRequest;
import com.layer1.clients.java8.digital.model.PaginatedResultAddress;
import java.util.UUID;
import com.layer1.clients.java8.digital.model.ValidateAddressRequest;
import com.layer1.clients.java8.digital.model.ValidateAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAddressCall(@javax.annotation.Nonnull CreateAddressRequest createAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAddressRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAddressValidateBeforeCall(@javax.annotation.Nonnull CreateAddressRequest createAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAddressRequest' is set
        if (createAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'createAddressRequest' when calling createAddress(Async)");
        }

        return createAddressCall(createAddressRequest, _callback);

    }


    private ApiResponse<Address> createAddressWithHttpInfo(@javax.annotation.Nonnull CreateAddressRequest createAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = createAddressValidateBeforeCall(createAddressRequest, null);
        Type localVarReturnType = new TypeToken<Address>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAddressAsync(@javax.annotation.Nonnull CreateAddressRequest createAddressRequest, final ApiCallback<Address> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAddressValidateBeforeCall(createAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<Address>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAddressRequest {
        @javax.annotation.Nonnull
        private final CreateAddressRequest createAddressRequest;

        private APIcreateAddressRequest(@javax.annotation.Nonnull CreateAddressRequest createAddressRequest) {
            this.createAddressRequest = createAddressRequest;
        }

        /**
         * Build call for createAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted for asynchronous creation </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAddressCall(createAddressRequest, _callback);
        }

        /**
         * Execute createAddress request
         * @return Address
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted for asynchronous creation </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public Address execute() throws ApiException {
            ApiResponse<Address> localVarResp = createAddressWithHttpInfo(createAddressRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAddress request with HTTP info returned
         * @return ApiResponse&lt;Address&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted for asynchronous creation </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Address> executeWithHttpInfo() throws ApiException {
            return createAddressWithHttpInfo(createAddressRequest);
        }

        /**
         * Execute createAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted for asynchronous creation </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Address> _callback) throws ApiException {
            return createAddressAsync(createAddressRequest, _callback);
        }
    }

    /**
     * Create a new address
     * Creates a new address
     * @param createAddressRequest  (required)
     * @return APIcreateAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted for asynchronous creation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAddressRequest createAddress(@javax.annotation.Nonnull CreateAddressRequest createAddressRequest) {
        return new APIcreateAddressRequest(createAddressRequest);
    }
    private okhttp3.Call getAddressCall(@javax.annotation.Nonnull UUID addressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/addresses/{addressId}"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressValidateBeforeCall(@javax.annotation.Nonnull UUID addressId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling getAddress(Async)");
        }

        return getAddressCall(addressId, _callback);

    }


    private ApiResponse<List<Address>> getAddressWithHttpInfo(@javax.annotation.Nonnull UUID addressId) throws ApiException {
        okhttp3.Call localVarCall = getAddressValidateBeforeCall(addressId, null);
        Type localVarReturnType = new TypeToken<List<Address>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAddressAsync(@javax.annotation.Nonnull UUID addressId, final ApiCallback<List<Address>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressValidateBeforeCall(addressId, _callback);
        Type localVarReturnType = new TypeToken<List<Address>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAddressRequest {
        @javax.annotation.Nonnull
        private final UUID addressId;

        private APIgetAddressRequest(@javax.annotation.Nonnull UUID addressId) {
            this.addressId = addressId;
        }

        /**
         * Build call for getAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAddressCall(addressId, _callback);
        }

        /**
         * Execute getAddress request
         * @return List&lt;Address&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public List<Address> execute() throws ApiException {
            ApiResponse<List<Address>> localVarResp = getAddressWithHttpInfo(addressId);
            return localVarResp.getData();
        }

        /**
         * Execute getAddress request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Address&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Address>> executeWithHttpInfo() throws ApiException {
            return getAddressWithHttpInfo(addressId);
        }

        /**
         * Execute getAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Address>> _callback) throws ApiException {
            return getAddressAsync(addressId, _callback);
        }
    }

    /**
     * Get address
     * Retrieve select address details
     * @param addressId  (required)
     * @return APIgetAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAddressRequest getAddress(@javax.annotation.Nonnull UUID addressId) {
        return new APIgetAddressRequest(addressId);
    }
    private okhttp3.Call listAddressesCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetPoolId", assetPoolId));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAddressesValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling listAddresses(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAddresses(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listAddresses(Async)");
        }

        return listAddressesCall(assetPoolId, pageNumber, pageSize, q, _callback);

    }


    private ApiResponse<PaginatedResultAddress> listAddressesWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q) throws ApiException {
        okhttp3.Call localVarCall = listAddressesValidateBeforeCall(assetPoolId, pageNumber, pageSize, q, null);
        Type localVarReturnType = new TypeToken<PaginatedResultAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAddressesAsync(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q, final ApiCallback<PaginatedResultAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAddressesValidateBeforeCall(assetPoolId, pageNumber, pageSize, q, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAddressesRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;
        @javax.annotation.Nullable
        private String q;

        private APIlistAddressesRequest(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.assetPoolId = assetPoolId;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set q
         * @param q Query in lucene format. Supported fields: reference, customerId (optional)
         * @return APIlistAddressesRequest
         */
        public APIlistAddressesRequest q(@javax.annotation.Nullable String q) {
            this.q = q;
            return this;
        }

        /**
         * Build call for listAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAddressesCall(assetPoolId, pageNumber, pageSize, q, _callback);
        }

        /**
         * Execute listAddresses request
         * @return PaginatedResultAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedResultAddress execute() throws ApiException {
            ApiResponse<PaginatedResultAddress> localVarResp = listAddressesWithHttpInfo(assetPoolId, pageNumber, pageSize, q);
            return localVarResp.getData();
        }

        /**
         * Execute listAddresses request with HTTP info returned
         * @return ApiResponse&lt;PaginatedResultAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedResultAddress> executeWithHttpInfo() throws ApiException {
            return listAddressesWithHttpInfo(assetPoolId, pageNumber, pageSize, q);
        }

        /**
         * Execute listAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedResultAddress> _callback) throws ApiException {
            return listAddressesAsync(assetPoolId, pageNumber, pageSize, q, _callback);
        }
    }

    /**
     * List addresses
     * Retrieve paginated list of addresses
     * @param assetPoolId  (required)
     * @param pageNumber  (required)
     * @param pageSize  (required)
     * @return APIlistAddressesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAddressesRequest listAddresses(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIlistAddressesRequest(assetPoolId, pageNumber, pageSize);
    }
    private okhttp3.Call listTagsCall(@javax.annotation.Nonnull UUID addressId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/addresses/{addressId}/tags"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(@javax.annotation.Nonnull UUID addressId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling listTags(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listTags(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listTags(Async)");
        }

        return listTagsCall(addressId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<PaginatedResultAddress> listTagsWithHttpInfo(@javax.annotation.Nonnull UUID addressId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(addressId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<PaginatedResultAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTagsAsync(@javax.annotation.Nonnull UUID addressId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback<PaginatedResultAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(addressId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTagsRequest {
        @javax.annotation.Nonnull
        private final UUID addressId;
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;

        private APIlistTagsRequest(@javax.annotation.Nonnull UUID addressId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.addressId = addressId;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Build call for listTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTagsCall(addressId, pageNumber, pageSize, _callback);
        }

        /**
         * Execute listTags request
         * @return PaginatedResultAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedResultAddress execute() throws ApiException {
            ApiResponse<PaginatedResultAddress> localVarResp = listTagsWithHttpInfo(addressId, pageNumber, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute listTags request with HTTP info returned
         * @return ApiResponse&lt;PaginatedResultAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedResultAddress> executeWithHttpInfo() throws ApiException {
            return listTagsWithHttpInfo(addressId, pageNumber, pageSize);
        }

        /**
         * Execute listTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedResultAddress> _callback) throws ApiException {
            return listTagsAsync(addressId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List address tags
     * Retrieve paginated list of address tags
     * @param addressId  (required)
     * @param pageNumber  (required)
     * @param pageSize  (required)
     * @return APIlistTagsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTagsRequest listTags(@javax.annotation.Nonnull UUID addressId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIlistTagsRequest(addressId, pageNumber, pageSize);
    }
    private okhttp3.Call validateAddressCall(@javax.annotation.Nonnull ValidateAddressRequest validateAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateAddressRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/addresses/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateAddressValidateBeforeCall(@javax.annotation.Nonnull ValidateAddressRequest validateAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validateAddressRequest' is set
        if (validateAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'validateAddressRequest' when calling validateAddress(Async)");
        }

        return validateAddressCall(validateAddressRequest, _callback);

    }


    private ApiResponse<ValidateAddressResponse> validateAddressWithHttpInfo(@javax.annotation.Nonnull ValidateAddressRequest validateAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = validateAddressValidateBeforeCall(validateAddressRequest, null);
        Type localVarReturnType = new TypeToken<ValidateAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateAddressAsync(@javax.annotation.Nonnull ValidateAddressRequest validateAddressRequest, final ApiCallback<ValidateAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateAddressValidateBeforeCall(validateAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<ValidateAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvalidateAddressRequest {
        @javax.annotation.Nonnull
        private final ValidateAddressRequest validateAddressRequest;

        private APIvalidateAddressRequest(@javax.annotation.Nonnull ValidateAddressRequest validateAddressRequest) {
            this.validateAddressRequest = validateAddressRequest;
        }

        /**
         * Build call for validateAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateAddressCall(validateAddressRequest, _callback);
        }

        /**
         * Execute validateAddress request
         * @return ValidateAddressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ValidateAddressResponse execute() throws ApiException {
            ApiResponse<ValidateAddressResponse> localVarResp = validateAddressWithHttpInfo(validateAddressRequest);
            return localVarResp.getData();
        }

        /**
         * Execute validateAddress request with HTTP info returned
         * @return ApiResponse&lt;ValidateAddressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValidateAddressResponse> executeWithHttpInfo() throws ApiException {
            return validateAddressWithHttpInfo(validateAddressRequest);
        }

        /**
         * Execute validateAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValidateAddressResponse> _callback) throws ApiException {
            return validateAddressAsync(validateAddressRequest, _callback);
        }
    }

    /**
     * Validate address
     * Validate a blockchain address
     * @param validateAddressRequest  (required)
     * @return APIvalidateAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIvalidateAddressRequest validateAddress(@javax.annotation.Nonnull ValidateAddressRequest validateAddressRequest) {
        return new APIvalidateAddressRequest(validateAddressRequest);
    }
}
