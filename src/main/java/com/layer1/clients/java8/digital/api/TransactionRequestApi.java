/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.CreateStakingTransactionRequest;
import com.layer1.clients.java8.digital.model.CreateTransactionRequest;
import com.layer1.clients.java8.digital.model.PaginatedResultTransactionRequest;
import com.layer1.clients.java8.digital.model.TransactionRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionRequestApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionRequestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionRequestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createStakingTransactionCall(@javax.annotation.Nonnull CreateStakingTransactionRequest createStakingTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStakingTransactionRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/staking-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStakingTransactionValidateBeforeCall(@javax.annotation.Nonnull CreateStakingTransactionRequest createStakingTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createStakingTransactionRequest' is set
        if (createStakingTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'createStakingTransactionRequest' when calling createStakingTransaction(Async)");
        }

        return createStakingTransactionCall(createStakingTransactionRequest, _callback);

    }


    private ApiResponse<TransactionRequest> createStakingTransactionWithHttpInfo(@javax.annotation.Nonnull CreateStakingTransactionRequest createStakingTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createStakingTransactionValidateBeforeCall(createStakingTransactionRequest, null);
        Type localVarReturnType = new TypeToken<TransactionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createStakingTransactionAsync(@javax.annotation.Nonnull CreateStakingTransactionRequest createStakingTransactionRequest, final ApiCallback<TransactionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStakingTransactionValidateBeforeCall(createStakingTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateStakingTransactionRequest {
        @javax.annotation.Nonnull
        private final CreateStakingTransactionRequest createStakingTransactionRequest;

        private APIcreateStakingTransactionRequest(@javax.annotation.Nonnull CreateStakingTransactionRequest createStakingTransactionRequest) {
            this.createStakingTransactionRequest = createStakingTransactionRequest;
        }

        /**
         * Build call for createStakingTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createStakingTransactionCall(createStakingTransactionRequest, _callback);
        }

        /**
         * Execute createStakingTransaction request
         * @return TransactionRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRequest execute() throws ApiException {
            ApiResponse<TransactionRequest> localVarResp = createStakingTransactionWithHttpInfo(createStakingTransactionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createStakingTransaction request with HTTP info returned
         * @return ApiResponse&lt;TransactionRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRequest> executeWithHttpInfo() throws ApiException {
            return createStakingTransactionWithHttpInfo(createStakingTransactionRequest);
        }

        /**
         * Execute createStakingTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRequest> _callback) throws ApiException {
            return createStakingTransactionAsync(createStakingTransactionRequest, _callback);
        }
    }

    /**
     * Create staking transaction request
     * Create a new blockchain staking transaction
     * @param createStakingTransactionRequest  (required)
     * @return APIcreateStakingTransactionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateStakingTransactionRequest createStakingTransaction(@javax.annotation.Nonnull CreateStakingTransactionRequest createStakingTransactionRequest) {
        return new APIcreateStakingTransactionRequest(createStakingTransactionRequest);
    }
    private okhttp3.Call createTransactionCall(@javax.annotation.Nonnull CreateTransactionRequest createTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTransactionRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/transaction-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionValidateBeforeCall(@javax.annotation.Nonnull CreateTransactionRequest createTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTransactionRequest' is set
        if (createTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'createTransactionRequest' when calling createTransaction(Async)");
        }

        return createTransactionCall(createTransactionRequest, _callback);

    }


    private ApiResponse<TransactionRequest> createTransactionWithHttpInfo(@javax.annotation.Nonnull CreateTransactionRequest createTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(createTransactionRequest, null);
        Type localVarReturnType = new TypeToken<TransactionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransactionAsync(@javax.annotation.Nonnull CreateTransactionRequest createTransactionRequest, final ApiCallback<TransactionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(createTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTransactionRequest {
        @javax.annotation.Nonnull
        private final CreateTransactionRequest createTransactionRequest;

        private APIcreateTransactionRequest(@javax.annotation.Nonnull CreateTransactionRequest createTransactionRequest) {
            this.createTransactionRequest = createTransactionRequest;
        }

        /**
         * Build call for createTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTransactionCall(createTransactionRequest, _callback);
        }

        /**
         * Execute createTransaction request
         * @return TransactionRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRequest execute() throws ApiException {
            ApiResponse<TransactionRequest> localVarResp = createTransactionWithHttpInfo(createTransactionRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createTransaction request with HTTP info returned
         * @return ApiResponse&lt;TransactionRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRequest> executeWithHttpInfo() throws ApiException {
            return createTransactionWithHttpInfo(createTransactionRequest);
        }

        /**
         * Execute createTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRequest> _callback) throws ApiException {
            return createTransactionAsync(createTransactionRequest, _callback);
        }
    }

    /**
     * Create transaction request
     * Create a new blockchain transaction
     * @param createTransactionRequest  (required)
     * @return APIcreateTransactionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTransactionRequest createTransaction(@javax.annotation.Nonnull CreateTransactionRequest createTransactionRequest) {
        return new APIcreateTransactionRequest(createTransactionRequest);
    }
    private okhttp3.Call getTransactionRequestByIdCall(@javax.annotation.Nonnull UUID requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/transaction-requests/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionRequestByIdValidateBeforeCall(@javax.annotation.Nonnull UUID requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getTransactionRequestById(Async)");
        }

        return getTransactionRequestByIdCall(requestId, _callback);

    }


    private ApiResponse<TransactionRequest> getTransactionRequestByIdWithHttpInfo(@javax.annotation.Nonnull UUID requestId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionRequestByIdValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<TransactionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransactionRequestByIdAsync(@javax.annotation.Nonnull UUID requestId, final ApiCallback<TransactionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionRequestByIdValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<TransactionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransactionRequestByIdRequest {
        @javax.annotation.Nonnull
        private final UUID requestId;

        private APIgetTransactionRequestByIdRequest(@javax.annotation.Nonnull UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Build call for getTransactionRequestById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransactionRequestByIdCall(requestId, _callback);
        }

        /**
         * Execute getTransactionRequestById request
         * @return TransactionRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public TransactionRequest execute() throws ApiException {
            ApiResponse<TransactionRequest> localVarResp = getTransactionRequestByIdWithHttpInfo(requestId);
            return localVarResp.getData();
        }

        /**
         * Execute getTransactionRequestById request with HTTP info returned
         * @return ApiResponse&lt;TransactionRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionRequest> executeWithHttpInfo() throws ApiException {
            return getTransactionRequestByIdWithHttpInfo(requestId);
        }

        /**
         * Execute getTransactionRequestById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionRequest> _callback) throws ApiException {
            return getTransactionRequestByIdAsync(requestId, _callback);
        }
    }

    /**
     * Get transaction request
     * Get transaction request by id
     * @param requestId  (required)
     * @return APIgetTransactionRequestByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransactionRequestByIdRequest getTransactionRequestById(@javax.annotation.Nonnull UUID requestId) {
        return new APIgetTransactionRequestByIdRequest(requestId);
    }
    private okhttp3.Call listTransactionRequestsCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/transaction-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (assetPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetPoolId", assetPoolId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionRequestsValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling listTransactionRequests(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listTransactionRequests(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listTransactionRequests(Async)");
        }

        return listTransactionRequestsCall(assetPoolId, pageNumber, pageSize, q, _callback);

    }


    private ApiResponse<PaginatedResultTransactionRequest> listTransactionRequestsWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q) throws ApiException {
        okhttp3.Call localVarCall = listTransactionRequestsValidateBeforeCall(assetPoolId, pageNumber, pageSize, q, null);
        Type localVarReturnType = new TypeToken<PaginatedResultTransactionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTransactionRequestsAsync(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, @javax.annotation.Nullable String q, final ApiCallback<PaginatedResultTransactionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionRequestsValidateBeforeCall(assetPoolId, pageNumber, pageSize, q, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultTransactionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTransactionRequestsRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;
        @javax.annotation.Nullable
        private String q;

        private APIlistTransactionRequestsRequest(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.assetPoolId = assetPoolId;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set q
         * @param q Query in lucene like format, e.g. reference:REF-12a1. Supported properties: reference, type (optional)
         * @return APIlistTransactionRequestsRequest
         */
        public APIlistTransactionRequestsRequest q(@javax.annotation.Nullable String q) {
            this.q = q;
            return this;
        }

        /**
         * Build call for listTransactionRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTransactionRequestsCall(assetPoolId, pageNumber, pageSize, q, _callback);
        }

        /**
         * Execute listTransactionRequests request
         * @return PaginatedResultTransactionRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedResultTransactionRequest execute() throws ApiException {
            ApiResponse<PaginatedResultTransactionRequest> localVarResp = listTransactionRequestsWithHttpInfo(assetPoolId, pageNumber, pageSize, q);
            return localVarResp.getData();
        }

        /**
         * Execute listTransactionRequests request with HTTP info returned
         * @return ApiResponse&lt;PaginatedResultTransactionRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedResultTransactionRequest> executeWithHttpInfo() throws ApiException {
            return listTransactionRequestsWithHttpInfo(assetPoolId, pageNumber, pageSize, q);
        }

        /**
         * Execute listTransactionRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedResultTransactionRequest> _callback) throws ApiException {
            return listTransactionRequestsAsync(assetPoolId, pageNumber, pageSize, q, _callback);
        }
    }

    /**
     * List transaction requests
     * Retrieve paginated list of transaction requests
     * @param assetPoolId asset pool id (required)
     * @param pageNumber current page number (required)
     * @param pageSize number of items in a page (required)
     * @return APIlistTransactionRequestsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTransactionRequestsRequest listTransactionRequests(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIlistTransactionRequestsRequest(assetPoolId, pageNumber, pageSize);
    }
}
