/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiCallback;
import com.layer1.clients.java8.digital.invoker.ApiClient;
import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.invoker.ApiResponse;
import com.layer1.clients.java8.digital.invoker.Configuration;
import com.layer1.clients.java8.digital.invoker.Pair;
import com.layer1.clients.java8.digital.invoker.ProgressRequestBody;
import com.layer1.clients.java8.digital.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.AssetPoolSummary;
import com.layer1.clients.java8.digital.model.Balance;
import com.layer1.clients.java8.digital.model.CreateAssetPoolRequest;
import java.util.UUID;
import com.layer1.clients.java8.digital.model.UpdateAssetPoolRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetPoolApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetPoolApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetPoolApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAssetPoolCall(@javax.annotation.Nonnull CreateAssetPoolRequest createAssetPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAssetPoolRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetPoolValidateBeforeCall(@javax.annotation.Nonnull CreateAssetPoolRequest createAssetPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAssetPoolRequest' is set
        if (createAssetPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'createAssetPoolRequest' when calling createAssetPool(Async)");
        }

        return createAssetPoolCall(createAssetPoolRequest, _callback);

    }


    private ApiResponse<String> createAssetPoolWithHttpInfo(@javax.annotation.Nonnull CreateAssetPoolRequest createAssetPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetPoolValidateBeforeCall(createAssetPoolRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAssetPoolAsync(@javax.annotation.Nonnull CreateAssetPoolRequest createAssetPoolRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetPoolValidateBeforeCall(createAssetPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAssetPoolRequest {
        @javax.annotation.Nonnull
        private final CreateAssetPoolRequest createAssetPoolRequest;

        private APIcreateAssetPoolRequest(@javax.annotation.Nonnull CreateAssetPoolRequest createAssetPoolRequest) {
            this.createAssetPoolRequest = createAssetPoolRequest;
        }

        /**
         * Build call for createAssetPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Tenant doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAssetPoolCall(createAssetPoolRequest, _callback);
        }

        /**
         * Execute createAssetPool request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Tenant doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = createAssetPoolWithHttpInfo(createAssetPoolRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAssetPool request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Tenant doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return createAssetPoolWithHttpInfo(createAssetPoolRequest);
        }

        /**
         * Execute createAssetPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Tenant doesn&#39;t exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return createAssetPoolAsync(createAssetPoolRequest, _callback);
        }
    }

    /**
     * Create asset pool
     * Creates a new asset pool which serves as a collection of assets
     * @param createAssetPoolRequest  (required)
     * @return APIcreateAssetPoolRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tenant doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAssetPoolRequest createAssetPool(@javax.annotation.Nonnull CreateAssetPoolRequest createAssetPoolRequest) {
        return new APIcreateAssetPoolRequest(createAssetPoolRequest);
    }
    private okhttp3.Call deleteAssetPoolCall(@javax.annotation.Nonnull UUID assetPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools/{assetPoolId}"
            .replace("{" + "assetPoolId" + "}", localVarApiClient.escapeString(assetPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetPoolValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling deleteAssetPool(Async)");
        }

        return deleteAssetPoolCall(assetPoolId, _callback);

    }


    private ApiResponse<Void> deleteAssetPoolWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetPoolValidateBeforeCall(assetPoolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetPoolAsync(@javax.annotation.Nonnull UUID assetPoolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetPoolValidateBeforeCall(assetPoolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAssetPoolRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;

        private APIdeleteAssetPoolRequest(@javax.annotation.Nonnull UUID assetPoolId) {
            this.assetPoolId = assetPoolId;
        }

        /**
         * Build call for deleteAssetPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> If pool is not empty </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetPoolCall(assetPoolId, _callback);
        }

        /**
         * Execute deleteAssetPool request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> If pool is not empty </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetPoolWithHttpInfo(assetPoolId);
        }

        /**
         * Execute deleteAssetPool request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> If pool is not empty </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetPoolWithHttpInfo(assetPoolId);
        }

        /**
         * Execute deleteAssetPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> If pool is not empty </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetPoolAsync(assetPoolId, _callback);
        }
    }

    /**
     * Delete asset pool
     * Delete asset pool with given id if it has not addresses nor transactions created
     * @param assetPoolId  (required)
     * @return APIdeleteAssetPoolRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> If pool is not empty </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAssetPoolRequest deleteAssetPool(@javax.annotation.Nonnull UUID assetPoolId) {
        return new APIdeleteAssetPoolRequest(assetPoolId);
    }
    private okhttp3.Call getAssetPoolCall(@javax.annotation.Nonnull UUID assetPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools/{assetPoolId}"
            .replace("{" + "assetPoolId" + "}", localVarApiClient.escapeString(assetPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetPoolValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling getAssetPool(Async)");
        }

        return getAssetPoolCall(assetPoolId, _callback);

    }


    private ApiResponse<String> getAssetPoolWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId) throws ApiException {
        okhttp3.Call localVarCall = getAssetPoolValidateBeforeCall(assetPoolId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetPoolAsync(@javax.annotation.Nonnull UUID assetPoolId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetPoolValidateBeforeCall(assetPoolId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetPoolRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;

        private APIgetAssetPoolRequest(@javax.annotation.Nonnull UUID assetPoolId) {
            this.assetPoolId = assetPoolId;
        }

        /**
         * Build call for getAssetPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetPoolCall(assetPoolId, _callback);
        }

        /**
         * Execute getAssetPool request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getAssetPoolWithHttpInfo(assetPoolId);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetPool request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getAssetPoolWithHttpInfo(assetPoolId);
        }

        /**
         * Execute getAssetPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getAssetPoolAsync(assetPoolId, _callback);
        }
    }

    /**
     * Get asset pool
     * Retrieve a specific asset pool given id
     * @param assetPoolId  (required)
     * @return APIgetAssetPoolRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetPoolRequest getAssetPool(@javax.annotation.Nonnull UUID assetPoolId) {
        return new APIgetAssetPoolRequest(assetPoolId);
    }
    private okhttp3.Call getAssetPoolBalanceCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools/{assetPoolId}/balances"
            .replace("{" + "assetPoolId" + "}", localVarApiClient.escapeString(assetPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetPoolBalanceValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling getAssetPoolBalance(Async)");
        }

        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getAssetPoolBalance(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling getAssetPoolBalance(Async)");
        }

        return getAssetPoolBalanceCall(assetPoolId, network, asset, _callback);

    }


    private ApiResponse<Balance> getAssetPoolBalanceWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset) throws ApiException {
        okhttp3.Call localVarCall = getAssetPoolBalanceValidateBeforeCall(assetPoolId, network, asset, null);
        Type localVarReturnType = new TypeToken<Balance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetPoolBalanceAsync(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset, final ApiCallback<Balance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetPoolBalanceValidateBeforeCall(assetPoolId, network, asset, _callback);
        Type localVarReturnType = new TypeToken<Balance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetPoolBalanceRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;
        @javax.annotation.Nonnull
        private final String network;
        @javax.annotation.Nonnull
        private final String asset;

        private APIgetAssetPoolBalanceRequest(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset) {
            this.assetPoolId = assetPoolId;
            this.network = network;
            this.asset = asset;
        }

        /**
         * Build call for getAssetPoolBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetPoolBalanceCall(assetPoolId, network, asset, _callback);
        }

        /**
         * Execute getAssetPoolBalance request
         * @return Balance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public Balance execute() throws ApiException {
            ApiResponse<Balance> localVarResp = getAssetPoolBalanceWithHttpInfo(assetPoolId, network, asset);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetPoolBalance request with HTTP info returned
         * @return ApiResponse&lt;Balance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Balance> executeWithHttpInfo() throws ApiException {
            return getAssetPoolBalanceWithHttpInfo(assetPoolId, network, asset);
        }

        /**
         * Execute getAssetPoolBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Balance> _callback) throws ApiException {
            return getAssetPoolBalanceAsync(assetPoolId, network, asset, _callback);
        }
    }

    /**
     * Get asset pool balance
     * Retrieve an asset pool balance for specific network and asset
     * @param assetPoolId  (required)
     * @param network  (required)
     * @param asset  (required)
     * @return APIgetAssetPoolBalanceRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetPoolBalanceRequest getAssetPoolBalance(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset) {
        return new APIgetAssetPoolBalanceRequest(assetPoolId, network, asset);
    }
    private okhttp3.Call getAssetPoolMaxWithdrawableAmountCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools/{assetPoolId}/max-withdrawable-amount"
            .replace("{" + "assetPoolId" + "}", localVarApiClient.escapeString(assetPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetPoolMaxWithdrawableAmountValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling getAssetPoolMaxWithdrawableAmount(Async)");
        }

        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getAssetPoolMaxWithdrawableAmount(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling getAssetPoolMaxWithdrawableAmount(Async)");
        }

        return getAssetPoolMaxWithdrawableAmountCall(assetPoolId, network, asset, _callback);

    }


    private ApiResponse<Balance> getAssetPoolMaxWithdrawableAmountWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset) throws ApiException {
        okhttp3.Call localVarCall = getAssetPoolMaxWithdrawableAmountValidateBeforeCall(assetPoolId, network, asset, null);
        Type localVarReturnType = new TypeToken<Balance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetPoolMaxWithdrawableAmountAsync(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset, final ApiCallback<Balance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetPoolMaxWithdrawableAmountValidateBeforeCall(assetPoolId, network, asset, _callback);
        Type localVarReturnType = new TypeToken<Balance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetPoolMaxWithdrawableAmountRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;
        @javax.annotation.Nonnull
        private final String network;
        @javax.annotation.Nonnull
        private final String asset;

        private APIgetAssetPoolMaxWithdrawableAmountRequest(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset) {
            this.assetPoolId = assetPoolId;
            this.network = network;
            this.asset = asset;
        }

        /**
         * Build call for getAssetPoolMaxWithdrawableAmount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetPoolMaxWithdrawableAmountCall(assetPoolId, network, asset, _callback);
        }

        /**
         * Execute getAssetPoolMaxWithdrawableAmount request
         * @return Balance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public Balance execute() throws ApiException {
            ApiResponse<Balance> localVarResp = getAssetPoolMaxWithdrawableAmountWithHttpInfo(assetPoolId, network, asset);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetPoolMaxWithdrawableAmount request with HTTP info returned
         * @return ApiResponse&lt;Balance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Balance> executeWithHttpInfo() throws ApiException {
            return getAssetPoolMaxWithdrawableAmountWithHttpInfo(assetPoolId, network, asset);
        }

        /**
         * Execute getAssetPoolMaxWithdrawableAmount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Balance> _callback) throws ApiException {
            return getAssetPoolMaxWithdrawableAmountAsync(assetPoolId, network, asset, _callback);
        }
    }

    /**
     * Get max asset pool withdrawable balance
     * Retrieve maximal approximate (does not take fees into account) amount withdrawable for specific network and asset
     * @param assetPoolId  (required)
     * @param network  (required)
     * @param asset  (required)
     * @return APIgetAssetPoolMaxWithdrawableAmountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetPoolMaxWithdrawableAmountRequest getAssetPoolMaxWithdrawableAmount(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull String network, @javax.annotation.Nonnull String asset) {
        return new APIgetAssetPoolMaxWithdrawableAmountRequest(assetPoolId, network, asset);
    }
    private okhttp3.Call getAssetPoolSummaryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetPoolSummaryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAssetPoolSummaryCall(_callback);

    }


    private ApiResponse<AssetPoolSummary> getAssetPoolSummaryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAssetPoolSummaryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AssetPoolSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetPoolSummaryAsync(final ApiCallback<AssetPoolSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetPoolSummaryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AssetPoolSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetPoolSummaryRequest {

        private APIgetAssetPoolSummaryRequest() {
        }

        /**
         * Build call for getAssetPoolSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetPoolSummaryCall(_callback);
        }

        /**
         * Execute getAssetPoolSummary request
         * @return AssetPoolSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public AssetPoolSummary execute() throws ApiException {
            ApiResponse<AssetPoolSummary> localVarResp = getAssetPoolSummaryWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getAssetPoolSummary request with HTTP info returned
         * @return ApiResponse&lt;AssetPoolSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetPoolSummary> executeWithHttpInfo() throws ApiException {
            return getAssetPoolSummaryWithHttpInfo();
        }

        /**
         * Execute getAssetPoolSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetPoolSummary> _callback) throws ApiException {
            return getAssetPoolSummaryAsync(_callback);
        }
    }

    /**
     * Get asset pool summary
     * Retrieve authenticated summary across all asset pools.
     * @return APIgetAssetPoolSummaryRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetPoolSummaryRequest getAssetPoolSummary() {
        return new APIgetAssetPoolSummaryRequest();
    }
    private okhttp3.Call listAssetPoolsCall(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetPoolsValidateBeforeCall(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAssetPools(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listAssetPools(Async)");
        }

        return listAssetPoolsCall(pageNumber, pageSize, _callback);

    }


    private ApiResponse<Void> listAssetPoolsWithHttpInfo(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAssetPoolsValidateBeforeCall(pageNumber, pageSize, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listAssetPoolsAsync(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetPoolsValidateBeforeCall(pageNumber, pageSize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIlistAssetPoolsRequest {
        @javax.annotation.Nonnull
        private final Integer pageNumber;
        @javax.annotation.Nonnull
        private final Integer pageSize;

        private APIlistAssetPoolsRequest(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Build call for listAssetPools
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssetPoolsCall(pageNumber, pageSize, _callback);
        }

        /**
         * Execute listAssetPools request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listAssetPoolsWithHttpInfo(pageNumber, pageSize);
        }

        /**
         * Execute listAssetPools request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listAssetPoolsWithHttpInfo(pageNumber, pageSize);
        }

        /**
         * Execute listAssetPools request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listAssetPoolsAsync(pageNumber, pageSize, _callback);
        }
    }

    /**
     * List asset pools
     * Retrieve paginated list of asset pools
     * @param pageNumber  (required)
     * @param pageSize  (required)
     * @return APIlistAssetPoolsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAssetPoolsRequest listAssetPools(@javax.annotation.Nonnull Integer pageNumber, @javax.annotation.Nonnull Integer pageSize) {
        return new APIlistAssetPoolsRequest(pageNumber, pageSize);
    }
    private okhttp3.Call updateAssetPoolCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull UpdateAssetPoolRequest updateAssetPoolRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAssetPoolRequest;

        // create path and map variables
        String localVarPath = "/digital/v1/asset-pools/{assetPoolId}"
            .replace("{" + "assetPoolId" + "}", localVarApiClient.escapeString(assetPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "httpSignature", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetPoolValidateBeforeCall(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull UpdateAssetPoolRequest updateAssetPoolRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetPoolId' is set
        if (assetPoolId == null) {
            throw new ApiException("Missing the required parameter 'assetPoolId' when calling updateAssetPool(Async)");
        }

        // verify the required parameter 'updateAssetPoolRequest' is set
        if (updateAssetPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAssetPoolRequest' when calling updateAssetPool(Async)");
        }

        return updateAssetPoolCall(assetPoolId, updateAssetPoolRequest, _callback);

    }


    private ApiResponse<String> updateAssetPoolWithHttpInfo(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull UpdateAssetPoolRequest updateAssetPoolRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetPoolValidateBeforeCall(assetPoolId, updateAssetPoolRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssetPoolAsync(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull UpdateAssetPoolRequest updateAssetPoolRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetPoolValidateBeforeCall(assetPoolId, updateAssetPoolRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAssetPoolRequest {
        @javax.annotation.Nonnull
        private final UUID assetPoolId;
        @javax.annotation.Nonnull
        private final UpdateAssetPoolRequest updateAssetPoolRequest;

        private APIupdateAssetPoolRequest(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull UpdateAssetPoolRequest updateAssetPoolRequest) {
            this.assetPoolId = assetPoolId;
            this.updateAssetPoolRequest = updateAssetPoolRequest;
        }

        /**
         * Build call for updateAssetPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAssetPoolCall(assetPoolId, updateAssetPoolRequest, _callback);
        }

        /**
         * Execute updateAssetPool request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = updateAssetPoolWithHttpInfo(assetPoolId, updateAssetPoolRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateAssetPool request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return updateAssetPoolWithHttpInfo(assetPoolId, updateAssetPoolRequest);
        }

        /**
         * Execute updateAssetPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return updateAssetPoolAsync(assetPoolId, updateAssetPoolRequest, _callback);
        }
    }

    /**
     * Update asset pool
     * Update an asset pool
     * @param assetPoolId  (required)
     * @param updateAssetPoolRequest  (required)
     * @return APIupdateAssetPoolRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Standard error response </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request invalid </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAssetPoolRequest updateAssetPool(@javax.annotation.Nonnull UUID assetPoolId, @javax.annotation.Nonnull UpdateAssetPoolRequest updateAssetPoolRequest) {
        return new APIupdateAssetPoolRequest(assetPoolId, updateAssetPoolRequest);
    }
}
