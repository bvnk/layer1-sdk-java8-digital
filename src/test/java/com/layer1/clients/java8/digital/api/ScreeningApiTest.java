/*
 * Digital Asset
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.layer1.clients.java8.digital.api;

import com.layer1.clients.java8.digital.invoker.ApiException;
import com.layer1.clients.java8.digital.model.ApiError;
import com.layer1.clients.java8.digital.model.ManualActionRequest;
import java.time.OffsetDateTime;
import com.layer1.clients.java8.digital.model.PaginatedScreenings;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScreeningApi
 */
@Disabled
public class ScreeningApiTest {

    private final ScreeningApi api = new ScreeningApi();

    /**
     * List screening results
     *
     * Retrieves a paginated list of the most recent transfers along with their screening results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScreeningsTest() throws ApiException {
        Integer pageNumber = null;
        Integer pageSize = null;
        String hash = null;
        Set<String> operation = null;
        Set<String> state = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String sort = null;
        String q = null;
        PaginatedScreenings response = api.listScreenings(pageNumber, pageSize)
                .hash(hash)
                .operation(operation)
                .state(state)
                .startDate(startDate)
                .endDate(endDate)
                .sort(sort)
                .q(q)
                .execute();
        // TODO: test validations
    }

    /**
     * Approve or reject a held transfer. Deposits can be only approved.
     *
     * Approves or rejects a held transfer based on the provided transfer ID and the destination address ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manuallyActionHeldTransferTest() throws ApiException {
        ManualActionRequest manualActionRequest = null;
        api.manuallyActionHeldTransfer(manualActionRequest)
                .execute();
        // TODO: test validations
    }

}
